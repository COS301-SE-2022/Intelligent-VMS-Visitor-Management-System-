# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

type Reward {
  type: String!
  xp: Int!
  desc: String!
}

type Badge {
  type: String!
  levels: Int!
  xp: [Int!]
  desc: [String!]!
  title: [String!]!
  requirements: [Int!]!
}

type ProfileInfo {
  xp: Int!
  badges: String!
  allBadges: [Badge!]!
  allRewards: [Reward!]!
}

type Restriction {
  name: String!
  value: Int!
}

type Parking {
  visitorEmail: String!
  parkingNumber: String!
  enabled: Boolean!
}

type ParkingReservation {
  invitationID: String!
  parkingNumber: String!
  reservationDate: String!
  activated: Boolean!
}

type InviteSuggestion {
  visitorEmail: String!
  visitorName: String!
  idDocType: String!
  idNumber: String!
}

type Visitor {
  _id: String!
  visitorName: String!
  idNumber: String!
  idDocType: String!
  numInvites: Float!
  visits: [String!]!
  prob: Float!
}

type Invite {
  userEmail: String!
  visitorEmail: String!
  visitorName: String!
  idDocType: String!
  idNumber: String!
  inviteID: String!
  inviteDate: String!
  requiresParking: Boolean!
  inviteState: String!
  notes: String!
  signOutTime: String!
  signInTime: String!
  trayNumber: Float!
}

type SearchInvite {
  visitorEmail: String!
  visitorName: String!
}

type User {
  email: String!
  permission: Int!
  badges: String!
  signUpTime: String!
}

type PredictedInviteData {
  date: String!
  visitors: Float!
  parking: Float!
}

type GroupInvite {
  _id: String
  numInvites: Float
  numVisitors: Float
  firstDate: String
}

type SearchUser {
  email: String!
  permission: Int!
  name: String!
}

type LoginUser {
  email: String
  access_token: String
}

type BSIdata {
  signInCount: Int!
  createCount: Int!
}

input UserInputType {
  email: String
  access_token: String
}

type Query {
  helloUser: String!
  searchUser(searchQuery: String!): [SearchUser!]!
  getUnauthorizedUsers: [User!]!
  getUsersByType(permission: Float!): [SearchUser!]!
  getMaxInvitesPerResident: Float!
  getNumInvites(email: String!): Float!
  getMaxCurfewTimePerResident: Float!
  getCurfewTime(email: String!): Float!
  getProfileInfo(email: String!): ProfileInfo!
  helloInvite: String!
  getInvites: [Invite!]!
  getInvitesWithEmail(email: String!): [Invite!]!
  getInvite(inviteID: String!): Invite!
  getTotalNumberOfVisitors: Float!
  getNumInvitesPerDate(dateStart: String!, dateEnd: String!): [Invite!]!
  getNumInvitesPerDateOfUser(dateStart: String!, dateEnd: String!, email: String!): [Invite!]!
  getTotalNumberOfInvitesOfResident(email: String!): Float!
  getInvitesByName(name: String!): [SearchInvite!]!
  getInvitesByNameForSearch(name: String!): [Invite!]!
  getInvitesByIDForSearch(inviteID: String!): Invite!
  getNumberOfInvitesOfVisitor(email: String!): Float!
  getInvitesByDate(date: String!): [Invite!]!
  getNumberOfOpenInvites(email: String!): Float!
  getPredictedInviteData(startDate: String!, endDate: String!): [PredictedInviteData!]!
  getVisitors(email: String!): [Visitor!]!
  getMostUsedInviteData(email: String!): InviteSuggestion!
  getInvitesForUserType(permission: Float!): [GroupInvite!]!
  getSuggestions(date: String!, userEmail: String!): [Visitor!]!
  helloParking: String!
  getTotalAvailableParking: Float!
  getDisabledParking: [Parking!]!
  getFreeParking: [Parking!]!
  getReservations: ParkingReservation!
  getInviteReservation(invitationID: String!): ParkingReservation!
  getUsedParkingsInRange(startDate: String!, endDate: String!): [ParkingReservation!]!
  isParkingAvailable(startDate: String!): Boolean!
  getNumberOfReservations(startDate: String!): Float!
  getTotalParking: Float!
  helloResident: String!
  helloReceptionist: String!
}

type Mutation {
  login(email: String!, password: String!): LoginUser!
  signup(email: String!, password: String!, type: String!, IDDocType: String!, idNumber: String!, name: String!): Boolean!
  verify(verifyID: String!, email: String!): Boolean!
  updateMaxInvites(difference: Float!): Boolean!
  updateMaxCurfewTime(difference: Float!): Boolean!
  deleteUserAccount(email: String!): Boolean!
  authorizeUserAccount(email: String!): Boolean!
  deauthorizeUserAccount(email: String!): Boolean!
  calculateBadges(email: String!): Boolean!
  createInvite(userEmail: String!, visitorName: String!, visitorEmail: String!, IDDocType: String!, IDNumber: String!, inviteDate: String!, requiresParking: Boolean!): String!
  cancelInvite(inviteID: String!): Boolean!
  assignParking(invitationID: String!): Parking!
  reserveParkingSpace(invitationID: String!, parkingNumber: Float!): ParkingReservation!
  reserveParking(invitationID: String!): ParkingReservation!
  unreservedParking(invitationID: String!): Boolean!
  freeParking(parkingNumber: Float!): Parking!
  createNParkingSpots(N: Float!): Boolean!
  adjustParking(numDisiredParkingTotal: Float!): Boolean!
  disableParkingSpace(parkingNumber: Float!): Parking!
  setNumInvitesPerResident(numInvites: Float!): Restriction!
  setCurfewTime(curfewTime: Float!): Restriction!
  signOut(inviteID: String!): Float!
  signIn(inviteID: String!, notes: String!, time: String!): Float!
  bulkSignIn(file: String!, userEmail: String!): BSIdata!
}